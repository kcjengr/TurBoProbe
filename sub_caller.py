#!/usr/bin/env python
# coding: utf-8

#   Copyright (c) 2018 Kurt Jacobson
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with This program.  If not, see <http://www.gnu.org/licenses/>.

import os       # For file path manipulation
import linuxcnc # For commanding linuxcnc

# These are needed for the GUI
from PyQt5 import uic, QtWidgets

# Change this path to match [RS274NGC] SUBROUTINE_PATH given in the INI
SUBROUTINE_PATH = '/home/kurt/linuxcnc/nc_files/subroutines'

# Create an instance of the LinuxCNC command object. We use this for setting
# linuxcnc modes and sending MDI commands to call the subs
CMD = linuxcnc.command()

class SubCaller(QtWidgets.QMainWindow):

    def __init__(self):
        super(SubCaller, self).__init__()

        # This loads the GUI from the `probe_tester.ui` file. This file
        # contains an XML description of the UI layout is generated by a
        # graphical GUI designer, which makes it very easy to prototype UIs.
        uic.loadUi("sub_caller.ui", self)


        # This loops thru all the files in the SUBROUTINE_PATH directory
        # and adds them to the combo box so the they can be selected.
        for filename in os.listdir(SUBROUTINE_PATH):

            # All the indented code below is run for each filename

            # Right now the filename variable contains the name of the sub file
            #   Ex: 'probe.ngc'

            # This splits the file name up into two parts, the name
            # and the extension, and stores them in a list.
            #   Ex: ['probe', 'ngc']
            filename_and_ext = os.path.splitext(filename)

            # All we need to call the sub is the filename part, we can get
            # that by taking the first element of the list like this:
             # Ex. 'probe'
            subname = filename_and_ext[0]

            # Finally, add an item to the combobox with the display text being
            # the filename and the data being the subname
            self.subComboBox.addItem(filename, subname)


        # When a button is interacted with it emits a signal which we can
        # connect to a method. In this case we want to connect the `clicked`
        # signal of the 'Call Sub' button to our callSub method.
        self.callSubButton.clicked.connect(self.callSub)


    def callSub(self):

        filename = self.subComboBox.currentText()
        subname = self.subComboBox.currentData()

        filepath = os.path.join(SUBROUTINE_PATH, filename)
        with open(filepath, 'r') as fh:
            line = fh.readline()
            if line.startswith(';ARGS'):
                args_format = line.strip(';ARGS').strip()

        args =  self.getArgs()
        arg_str = args_format.format(**args)

        cmd_str = "o<{}> call {}".format(subname, arg_str)

        # Print the command to the terminal so the user can see what is happening
        print "Calling MDI command: ", cmd_str

        # Set the LinuxCNC mode to MDI
        CMD.mode(linuxcnc.MODE_MDI)

        # Issue the MDI command to call the sub
        CMD.mdi(cmd_str)


    def getArgs(self):
        args = {}
        for line_edit in self.findChildren(QtWidgets.QLineEdit):
            key = line_edit.objectName()
            value = line_edit.text()
            args[key] = value
        return args


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)

    sub_caller = SubCaller()
    sub_caller.show()

    sys.exit(app.exec_())
